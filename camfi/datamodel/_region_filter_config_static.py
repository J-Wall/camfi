# generated by datamodel-codegen:
#   filename:  _region_filter_config_dynamic.py
#   timestamp: 2021-08-06T09:51:45+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class FloatFilter(BaseModel):
    ge: float = Field(
        ...,
        description="Only include region if attribute >= this value.",
        title="Greater or Equal",
    )
    le: float = Field(
        ...,
        description="Only include region if attribute <= this value.",
        title="Less or Equal",
    )
    exclude_none: Optional[bool] = Field(
        False,
        description="Whether to exclude region if attribute is not set.",
        title="Exclude None",
    )


class RegionFilterConfig(BaseModel):
    score: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the score region attribute.",
        title="Score",
    )
    best_peak: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the best_peak region attribute.",
        title="Best Peak",
    )
    blur_length: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the blur_length region attribute.",
        title="Blur Length",
    )
    snr: Optional[FloatFilter] = Field(
        None, description="Sets threhsolds for the snr region attribute.", title="Snr"
    )
    wb_freq_up: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the wb_freq_up region attribute.",
        title="Wb Freq Up",
    )
    wb_freq_down: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the wb_freq_down region attribute.",
        title="Wb Freq Down",
    )
    et_up: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the et_up region attribute.",
        title="Et Up",
    )
    et_dn: Optional[FloatFilter] = Field(
        None,
        description="Sets threhsolds for the et_dn region attribute.",
        title="Et Dn",
    )

    class Config:
        schema_extra = {
            "description": "Contains options for filtering regions (annotations)."
        }
